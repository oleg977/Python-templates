"""
Модуль: control_structures
--------------------------

Данный модуль демонстрирует работу с управляющими конструкциями в Python:
условные операторы (if, elif, else) и циклы (for, while).
Также включает примеры распространенных ошибок при работе с этими конструкциями.
"""


# === Раздел 1: Условные операторы (if, elif, else) ===

def demonstrate_conditionals() -> None:
    """
    Демонстрирует работу с условными операторами.

    Условные операторы позволяют выполнять код в зависимости от условия.
    """
    print("=== Условные операторы (if, elif, else) ===")

    # Пример использования if-elif-else
    number: int = 10

    if number > 0:
        print(f"Число {number} положительное.")
    elif number < 0:
        print(f"Число {number} отрицательное.")
    else:
        print(f"Число {number} равно нулю.")


# === Раздел 2: Цикл for ===

def demonstrate_for_loop() -> None:
    """
    Демонстрирует работу с циклом for.

    Цикл for используется для перебора элементов последовательности (например, списка).
    """
    print("\n=== Цикл for ===")

    # Перебор элементов списка
    fruits: list[str] = ["apple", "banana", "cherry"]
    print("Перебор элементов списка:")
    for fruit in fruits:
        print(f"- {fruit}")

    # Перебор с индексами
    print("\nПеребор с индексами:")
    for index, fruit in enumerate(fruits):
        print(f"{index}: {fruit}")


# === Раздел 3: Цикл while ===

def demonstrate_while_loop() -> None:
    """
    Демонстрирует работу с циклом while.

    Цикл while выполняется, пока условие истинно.
    """
    print("\n=== Цикл while ===")

    # Пример использования while
    countdown: int = 5
    print("Обратный отсчет:")
    while countdown > 0:
        print(f"{countdown}...")
        countdown -= 1
    print("Старт!")


# === Раздел 4: Лучшие практики ===

def demonstrate_best_practices() -> None:
    """
    Демонстрирует лучшие практики работы с управляющими конструкциями.

    Включает использование осмысленных условий, избегание бесконечных циклов и т.д.
    """
    print("\n=== Лучшие практики ===")

    # Использование осмысленных условий
    is_active: bool = True
    if is_active:
        print("Система активна.")
    else:
        print("Система неактивна.")

    # Избегание бесконечных циклов
    print("\nБезопасный цикл с ограничением:")
    counter: int = 0
    while counter < 5:
        print(f"Итерация {counter + 1}")
        counter += 1


# === Раздел 5: Распространенные ошибки ===

def demonstrate_common_errors() -> None:
    """
    Демонстрирует распространенные ошибки при работе с управляющими конструкциями.

    Включает ошибки: пропущенный блок else, бесконечные циклы, некорректные условия и т.д.
    """
    print("\n=== Распространенные ошибки ===")

    # 1. Пропущенный блок else
    print("\nПример: пропущенный блок else может затруднить понимание логики.")
    number: int = 10
    if number > 0:
        print(f"Число {number} положительное.")
    # Если число <= 0, ничего не произойдет (отсутствует else)

    # 2. Бесконечный цикл
    try:
        print("\nПример: бесконечный цикл (комментировано для предотвращения зависания).")
        # while True:
        #     print("Это бесконечный цикл!")
        print("Бесконечный цикл приводит к зависанию программы.")
    except KeyboardInterrupt:
        print("Бесконечный цикл прерван.")

    # 3. Некорректные условия
    print("\nПример: некорректные условия могут привести к неправильному выполнению кода.")
    value: int = 5
    if value == "5":  # Сравнение числа со строкой
        print("Условие истинно.")
    else:
        print("Ошибка: сравнение числа со строкой всегда дает False.")

    # 4. Пропущенный break в цикле
    print("\nПример: пропущенный break может привести к нежелательному выполнению цикла.")
    for i in range(5):
        if i == 3:
            print("Цикл завершен на i = 3.")
            break  # Без break цикл продолжится до конца


if __name__ == "__main__":
    """
    Точка входа в модуль.

    Выполняет все демонстрационные функции при запуске скрипта напрямую.
    """
    demonstrate_conditionals()
    demonstrate_for_loop()
    demonstrate_while_loop()
    demonstrate_best_practices()
    demonstrate_common_errors()

    запускаем файл
    python basics / control_structures.py