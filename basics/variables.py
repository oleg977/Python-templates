"""
Модуль: variables
-----------------

Данный модуль демонстрирует работу с переменными в Python.
Переменные используются для хранения данных, и Python является динамически типизированным языком,
что означает, что вам не нужно явно объявлять тип переменной.
"""

# === Раздел 1: Базовое присваивание переменных ===

# Целочисленная переменная
number_of_students: int = 30

# Строковая переменная
course_name: str = "Python Programming"

# Число с плавающей точкой
average_score: float = 85.5

# Логическая переменная
is_active: bool = True


def show_variable_types() -> None:
    """
    Демонстрирует типы переменных и их значения.

    Выводит значение и тип каждой переменной, объявленной выше.
    """
    print("=== Типы переменных ===")
    print(f"Количество студентов: {number_of_students} (Тип: {type(number_of_students)})")
    print(f"Название курса: {course_name} (Тип: {type(course_name)})")
    print(f"Средний балл: {average_score} (Тип: {type(average_score)})")
    print(f"Активен: {is_active} (Тип: {type(is_active)})")


# === Раздел 2: Переопределение переменных ===

# Переменные могут быть переопределены новыми значениями или даже другим типом данных
def demonstrate_reassignment() -> None:
    """
    Демонстрирует переопределение переменных новыми значениями или типами.

    Показывает, как переменные могут изменять свои значения и типы динамически.
    """
    print("\n=== Переопределение переменных ===")

    # Исходное значение
    value: int = 10
    print(f"Исходное значение: {value} (Тип: {type(value)})")

    # Переопределение на строку
    value = "Привет, Python!"
    print(f"Переопределено на строку: {value} (Тип: {type(value)})")

    # Переопределение на число с плавающей точкой
    value = 3.14
    print(f"Переопределено на число с плавающей точкой: {value} (Тип: {type(value)})")


# === Раздел 3: Константы ===

# Константы обычно записываются в верхнем регистре и не должны изменяться
PI: float = 3.14159
MAX_USERS: int = 100


def display_constants() -> None:
    """
    Демонстрирует использование констант в Python.

    Выводит значения констант, объявленных выше.
    """
    print("\n=== Константы ===")
    print(f"Число Пи: {PI} (Тип: {type(PI)})")
    print(f"Максимальное количество пользователей: {MAX_USERS} (Тип: {type(MAX_USERS)})")


# === Раздел 4: Лучшие практики ===

def demonstrate_best_practices() -> None:
    """
    Демонстрирует лучшие практики работы с переменными.

    Включает осмысленные имена переменных, аннотации типов и избегание "магических чисел".
    """
    print("\n=== Лучшие практики ===")

    # Осмысленные имена переменных
    total_score: int = 100
    number_of_players: int = 5

    # Избегаем "магических чисел", используя константы
    average_score_per_player: float = total_score / number_of_players

    print(f"Общий балл: {total_score}")
    print(f"Количество игроков: {number_of_players}")
    print(f"Средний балл на игрока: {average_score_per_player}")


# === Раздел 5: Распространенные ошибки ===

def demonstrate_common_errors() -> None:
    """
    Демонстрирует распространенные ошибки при работе с переменными.

    Включает ошибки: использование необъявленных переменных, деление на ноль,
    некорректное преобразование типов и т.д.
    """
    print("\n=== Распространенные ошибки ===")

    # 1. Использование необъявленной переменной
    try:
        print(f"Значение необъявленной переменной: {undefined_variable}")
    except NameError as e:
        print(f"Ошибка: {e} - Переменная должна быть объявлена перед использованием.")

    # 2. Деление на ноль
    try:
        result = 10 / 0
    except ZeroDivisionError as e:
        print(f"Ошибка: {e} - Нельзя делить на ноль.")

    # 3. Некорректное преобразование типов
    try:
        invalid_conversion = int("not_a_number")
    except ValueError as e:
        print(f"Ошибка: {e} - Строка не может быть преобразована в целое число.")

    # 4. Изменение типа переменной без учета контекста
    value: int = 10
    value = "string_value"
    print(f"Переменная после изменения типа: {value} (Тип: {type(value)})")
    print("Внимание: Переменные могут менять тип, но это может привести к ошибкам в программе.")


if __name__ == "__main__":
    """
    Точка входа в модуль.

    Выполняет все демонстрационные функции при запуске скрипта напрямую.
    """
    show_variable_types()
    demonstrate_reassignment()
    display_constants()
    demonstrate_best_practices()
    demonstrate_common_errors()

